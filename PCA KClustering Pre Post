
import numpy as np
import matplotlib.pyplot as plt
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans
from sklearn.impute import SimpleImputer

# Load the pre and post arrays
pre = np.load("C:/Users/zheng/OneDrive/Desktop/Bachelor/F0254/events_pre.npy")
post = np.load("C:/Users/zheng/OneDrive/Desktop/Bachelor/F0254/events_post.npy")

# Function to perform PCA and clustering
def pca_and_cluster(data, title):
    # Flatten the data
    flattened_data = data.reshape(data.shape[0], -1)

    # Impute NaN values with column means
    imputer = SimpleImputer(strategy='mean')
    imputed_data = imputer.fit_transform(flattened_data)

    # Apply PCA to reduce to 13 components
    pca = PCA(n_components=13)
    pca_result = pca.fit_transform(imputed_data)

    # Perform K-means clustering (adjust number of clusters if needed)
    kmeans = KMeans(n_clusters=6)  # Choose the number of clusters
    clusters = kmeans.fit_predict(pca_result)

    return pca_result, clusters

# Perform PCA and clustering for pre and post
pca_pre, clusters_pre = pca_and_cluster(pre, "Pre Eye Opening")
pca_post, clusters_post = pca_and_cluster(post, "Post Eye Opening")

# Create a figure for comparison
fig, axs = plt.subplots(1, 2, figsize=(16, 8))

# Plot PCA results for Pre using the first 2 principal components
scatter_pre = axs[0].scatter(pca_pre[:, 0], pca_pre[:, 1], c=clusters_pre, cmap='viridis', alpha=0.7)
axs[0].set_title("PCA Result and Clustering for Pre Eye Opening")
axs[0].set_xlabel("Principal Component 1")
axs[0].set_ylabel("Principal Component 2")
axs[0].grid()
axs[0].legend(*scatter_pre.legend_elements(), title="Cluster ID")

# Plot PCA results for Post using the first 2 principal components
scatter_post = axs[1].scatter(pca_post[:, 0], pca_post[:, 1], c=clusters_post, cmap='viridis', alpha=0.7)
axs[1].set_title("PCA Result and Clustering for Post Eye Opening")
axs[1].set_xlabel("Principal Component 1")
axs[1].set_ylabel("Principal Component 2")
axs[1].grid()
axs[1].legend(*scatter_post.legend_elements(), title="Cluster ID")

plt.tight_layout()
plt.show()
