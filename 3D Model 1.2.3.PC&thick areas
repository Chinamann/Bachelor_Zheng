import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from sklearn.decomposition import PCA
from sklearn.impute import SimpleImputer
from scipy.stats import gaussian_kde

# Loading the arrays
pre = np.load("C:/Users/zheng/OneDrive/Desktop/Bachelor/F0254/events_pre.npy")
post = np.load("C:/Users/zheng/OneDrive/Desktop/Bachelor/F0254/events_post.npy")

# Ensure both arrays have the same shape by trimming them to the smallest common shape
min_shape = min(pre.shape[1:], post.shape[1:])  # Find the minimum shape for dimension 1 and beyond

# Trim both arrays to the same size
pre_trimmed = pre[:, :min_shape[0], :min_shape[1]]
post_trimmed = post[:, :min_shape[0], :min_shape[1]]

# Flatten the arrays (reshape them to 2D) so we can apply PCA
pre_flattened = pre_trimmed.reshape(pre_trimmed.shape[0], -1)  # (samples, features)
post_flattened = post_trimmed.reshape(post_trimmed.shape[0], -1)

# Combine the 'pre' and 'post' arrays for PCA
combined = np.vstack([pre_flattened, post_flattened])

# Impute NaN values with column means (instead of removing them)
imputer = SimpleImputer(strategy='mean')
filtered_combined = imputer.fit_transform(combined)

# Apply PCA on the imputed data
pca = PCA(n_components=13)  # Limit to 13 principal components
pca.fit(filtered_combined)

# Get the transformed data (projections onto the principal components)
transformed_data = pca.transform(filtered_combined)

# 3D scatter plot of the first 3 principal components
fig = plt.figure(figsize=(12, 10))
ax = fig.add_subplot(111, projection='3d')

# Scatter plot for the first 3 principal components
ax.scatter(transformed_data[:pre_flattened.shape[0], 0], 
           transformed_data[:pre_flattened.shape[0], 1], 
           transformed_data[:pre_flattened.shape[0], 2], 
           color='blue', alpha=0.5, label='Pre')

ax.scatter(transformed_data[pre_flattened.shape[0]:, 0], 
           transformed_data[pre_flattened.shape[0]:, 1], 
           transformed_data[pre_flattened.shape[0]:, 2], 
           color='orange', alpha=0.5, label='Post')

# Mark the thickest area for the 'pre' dataset
data_pre = transformed_data[:pre_flattened.shape[0], :3].T
kde_pre = gaussian_kde(data_pre)
density_pre = kde_pre(data_pre)

# Find the index of the maximum density point for 'pre'
max_density_index_pre = np.argmax(density_pre)
max_density_point_pre = data_pre[:, max_density_index_pre]

# Highlight the thickest area for 'pre'
ax.scatter(max_density_point_pre[0], max_density_point_pre[1], max_density_point_pre[2], 
           color='red', s=1500, alpha=0.5, edgecolor='k', label='Thickest Area Pre')

# Mark the thickest area for the 'post' dataset
data_post = transformed_data[pre_flattened.shape[0]:, :3].T
kde_post = gaussian_kde(data_post)
density_post = kde_post(data_post)

# Find the index of the maximum density point for 'post'
max_density_index_post = np.argmax(density_post)
max_density_point_post = data_post[:, max_density_index_post]

# Highlight the thickest area for 'post'
ax.scatter(max_density_point_post[0], max_density_point_post[1], max_density_point_post[2], 
           color='green', s=1500, alpha=0.5, edgecolor='k', label='Thickest Area Post')

# Setting the labels and title
ax.set_title("3D Scatter Plot of First 3 Principal Components with Thickest Areas")
ax.set_xlabel("PC 1")
ax.set_ylabel("PC 2")
ax.set_zlabel("PC 3")
ax.legend()
plt.show()
