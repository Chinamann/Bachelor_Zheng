
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Load the data
pre = np.load("C:/Users/zheng/OneDrive/Desktop/Bachelor/F0254/events_pre.npy")
post = np.load("C:/Users/zheng/OneDrive/Desktop/Bachelor/F0254/events_post.npy")

# Preprocess data by replacing NaNs with zero
pre = np.nan_to_num(pre)
post = np.nan_to_num(post)

# Check if the data is 3D (slices x timepoints x features)
print(f"Pre data shape: {pre.shape}")  # Should be 3D
print(f"Post data shape: {post.shape}")  # Should be 3D

# Reshape the data so that each slice becomes a row with flattened features
# Assuming the shape is (slices, timepoints, features)
pre_reshaped = pre.reshape(pre.shape[0], -1)  # Reshape to (slices, flattened_features)
post_reshaped = post.reshape(post.shape[0], -1)  # Same for post data

# Check reshaped dimensions to confirm they are 2D now
print(f"Pre reshaped data shape: {pre_reshaped.shape}")  # Should be (slices, flattened_features)
print(f"Post reshaped data shape: {post_reshaped.shape}")  # Should be (slices, flattened_features)

# Calculate the correlation matrix for the pre and post data
pre_corr_matrix = np.corrcoef(pre_reshaped)  # Correlate across slices (rows)
post_corr_matrix = np.corrcoef(post_reshaped)  # Same for post data

# Plot heatmaps for the correlation matrices of pre and post data
fig, axs = plt.subplots(1, 2, figsize=(15, 7))

# Plot for pre data
sns.heatmap(pre_corr_matrix, cmap="coolwarm", annot=False, cbar=True, ax=axs[0], square=True)
axs[0].set_title('Pre Data - Pattern Correlation Matrix')
axs[0].set_xlabel('Pattern Index')
axs[0].set_ylabel('Pattern Index')

# Plot for post data
sns.heatmap(post_corr_matrix, cmap="coolwarm", annot=False, cbar=True, ax=axs[1], square=True)
axs[1].set_title('Post Data - Pattern Correlation Matrix')
axs[1].set_xlabel('Pattern Index')
axs[1].set_ylabel('Pattern Index')

plt.tight_layout()
plt.show()
