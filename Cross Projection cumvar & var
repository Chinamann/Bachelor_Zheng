
import numpy as np
from sklearn.decomposition import PCA
import matplotlib.pyplot as plt

# Load the data
pre = np.nan_to_num(np.load("C:/Users/zheng/OneDrive/Desktop/Bachelor/F0254/events_pre.npy"))
post = np.nan_to_num(np.load("C:/Users/zheng/OneDrive/Desktop/Bachelor/F0254/events_post.npy"))

# Flatten the data for PCA
pre_flat = pre.reshape(pre.shape[0], -1)
post_flat = post.reshape(post.shape[0], -1)

# Bootstrapping function with standard deviation
def bootstrap_pca(data, n_samples, n_iterations, n_components):
    variances = np.zeros((n_iterations, n_components))
    for i in range(n_iterations):
        sample_indices = np.random.choice(data.shape[0], size=n_samples, replace=True)
        sample_data = data[sample_indices]
        pca = PCA(n_components=n_components)
        pca.fit(sample_data)
        variances[i] = pca.explained_variance_
    return variances.mean(axis=0), variances.std(axis=0)

# Perform PCA with bootstrapping
n_components = 13
n_iterations = 100
n_samples = 100

pre_pcs_var_mean, pre_pcs_var_std = bootstrap_pca(pre_flat, n_samples, n_iterations, n_components)
post_pcs_var_mean, post_pcs_var_std = bootstrap_pca(post_flat, n_samples, n_iterations, n_components)

# Calculate cross-projections
pre_to_post_proj = np.dot(pre_flat, PCA(n_components=n_components).fit(post_flat).components_.T)
post_to_pre_proj = np.dot(post_flat, PCA(n_components=n_components).fit(pre_flat).components_.T)

# Self-projections
pre_to_pre_proj = np.dot(pre_flat, PCA(n_components=n_components).fit(pre_flat).components_.T)
post_to_post_proj = np.dot(post_flat, PCA(n_components=n_components).fit(post_flat).components_.T)

# Variance calculations
pre_to_post_var = np.var(pre_to_post_proj, axis=0)
pre_to_pre_var = np.var(pre_to_pre_proj, axis=0)
post_to_pre_var = np.var(post_to_pre_proj, axis=0)
post_to_post_var = np.var(post_to_post_proj, axis=0)

# Standard deviations of projections
pre_to_post_std = np.std(pre_to_post_proj, axis=0)
pre_to_pre_std = np.std(pre_to_pre_proj, axis=0)
post_to_pre_std = np.std(post_to_pre_proj, axis=0)
post_to_post_std = np.std(post_to_post_proj, axis=0)

# Print Standard Deviations
print("Standard Deviations for PCA Explained Variance:")
print(f"Pre PCA STD: {pre_pcs_var_std}")
print(f"Post PCA STD: {post_pcs_var_std}")

print("\nStandard Deviations of Cross-Projections:")
print(f"Pre to Pre STD: {pre_to_pre_std}")
print(f"Pre to Post STD: {pre_to_post_std}")
print(f"Post to Pre STD: {post_to_pre_std}")
print(f"Post to Post STD: {post_to_post_std}")

# Global variance normalization
total_variance_pre = np.sum(np.var(pre_flat, axis=0))
total_variance_post = np.sum(np.var(post_flat, axis=0))

# Cumulative variance percentages
pre_to_pre_cumulative_percent = np.cumsum(pre_to_pre_var) / total_variance_pre * 100
pre_to_post_cumulative_percent = np.cumsum(pre_to_post_var) / total_variance_pre * 100
post_to_pre_cumulative_percent = np.cumsum(post_to_pre_var) / total_variance_post * 100
post_to_post_cumulative_percent = np.cumsum(post_to_post_var) / total_variance_post * 100

# ** Corrected Plotting Cumulative Variance **
plt.figure(figsize=(12, 6))
plt.errorbar(range(1, n_components + 1), pre_to_pre_cumulative_percent, yerr=pre_to_pre_std, 
             label="Pre to Pre", marker="o", color="green")
plt.errorbar(range(1, n_components + 1), post_to_pre_cumulative_percent, yerr=post_to_pre_std, 
             label="Post to Pre", marker="o", color="orange")
plt.title("Cumulative Variance: Projections onto Pre PCs (Bootstrapping)")
plt.xlabel("Number of Principal Components")
plt.ylabel("Cumulative Variance Explained (%)")
plt.xticks(range(1, n_components + 1))
plt.legend()
plt.grid()
plt.show()

plt.figure(figsize=(12, 6))
plt.errorbar(range(1, n_components + 1), post_to_post_cumulative_percent, yerr=post_to_post_std, 
             label="Post to Post", marker="o", color="red")
plt.errorbar(range(1, n_components + 1), pre_to_post_cumulative_percent, yerr=pre_to_post_std, 
             label="Pre to Post", marker="o", color="blue")
plt.title("Cumulative Variance: Projections onto Post PCs (Bootstrapping)")
plt.xlabel("Number of Principal Components")
plt.ylabel("Cumulative Variance Explained (%)")
plt.xticks(range(1, n_components + 1))
plt.legend()
plt.grid()
plt.show()

# ** Corrected Plotting Normal Variance **
plt.figure(figsize=(12, 6))
plt.errorbar(range(1, n_components + 1), pre_to_pre_var / total_variance_pre * 100, yerr=pre_to_pre_std, 
             label="Pre to Pre", marker="o", color="green", linestyle='--')
plt.errorbar(range(1, n_components + 1), post_to_pre_var / total_variance_post * 100, yerr=post_to_pre_std, 
             label="Post to Pre", marker="o", color="orange", linestyle='--')
plt.title("Normal Variance: Projections onto Pre PCs (Bootstrapping)")
plt.xlabel("Number of Principal Components")
plt.ylabel("Variance Explained (%)")
plt.xticks(range(1, n_components + 1))
plt.legend()
plt.grid()
plt.show()

plt.figure(figsize=(12, 6))
plt.errorbar(range(1, n_components + 1), post_to_post_var / total_variance_post * 100, yerr=post_to_post_std, 
             label="Post to Post", marker="o", color="red", linestyle='--')
plt.errorbar(range(1, n_components + 1), pre_to_post_var / total_variance_pre * 100, yerr=pre_to_post_std, 
             label="Pre to Post", marker="o", color="blue", linestyle='--')
plt.title("Normal Variance: Projections onto Post PCs (Bootstrapping)")
plt.xlabel("Number of Principal Components")
plt.ylabel("Variance Explained (%)")
plt.xticks(range(1, n_components + 1))
plt.legend()
plt.grid()
plt.show()
