import numpy as np
import matplotlib.pyplot as plt
from sklearn.decomposition import PCA
from sklearn.impute import SimpleImputer

# Load the pre and post data
pre = np.load("C:/Users/zheng/OneDrive/Desktop/Bachelor/F0254/events_pre.npy")
post = np.load("C:/Users/zheng/OneDrive/Desktop/Bachelor/F0254/events_post.npy")

# Ensure both arrays have the same shape by trimming them to the smallest common shape
min_shape = min(pre.shape[1:], post.shape[1:])
pre_trimmed = pre[:, :min_shape[0], :min_shape[1]]
post_trimmed = post[:, :min_shape[0], :min_shape[1]]

# Flatten the arrays (reshape them to 2D) for PCA
pre_flattened = pre_trimmed.reshape(pre_trimmed.shape[0], -1)
post_flattened = post_trimmed.reshape(post_trimmed.shape[0], -1)

# Impute missing values if needed (assuming mean imputation)
imputer = SimpleImputer(strategy='mean')
pre_imputed = imputer.fit_transform(pre_flattened)
post_imputed = imputer.fit_transform(post_flattened)

# Apply PCA separately to pre and post data
pca_pre = PCA(n_components=13)  # First 13 components for pre
pca_post = PCA(n_components=13)  # First 13 components for post

# Fit PCA on the pre and post data
pca_pre.fit(pre_imputed)
pca_post.fit(post_imputed)

# Extract the principal component weights (components_)
pre_weights = pca_pre.components_
post_weights = pca_post.components_

# Compute mean absolute weights for each principal component
pre_mean_abs_weights = np.mean(np.abs(pre_weights), axis=1)
post_mean_abs_weights = np.mean(np.abs(post_weights), axis=1)

# Scatter plot comparing mean absolute weights of pre and post
plt.figure(figsize=(10, 6))

plt.scatter(np.arange(1, 14), pre_mean_abs_weights, color='blue', alpha=0.7, label='Pre', s=100)
plt.scatter(np.arange(1, 14), post_mean_abs_weights, color='orange', alpha=0.7, label='Post', s=100)

# Add lines to connect points for better comparison
for i in range(13):
    plt.plot([i+1, i+1], [pre_mean_abs_weights[i], post_mean_abs_weights[i]], color='gray', linestyle='--', alpha=0.5)

plt.title("Scatter Plot of Mean Absolute Weights: Pre vs Post (PC1 to PC13)")
plt.xlabel("Principal Component")
plt.ylabel("Mean Absolute Weight")
plt.xticks(np.arange(1, 14))  # PC1 to PC13
plt.legend()
plt.grid(True)
plt.show()
